{"version":3,"sources":["components/habit.jsx","components/habitAddForm.jsx","components/habits.jsx","components/navbar.jsx","app.jsx","index.js"],"names":["Habit","handleIncrement","props","onIncrement","habit","handleDecrement","onDecrement","handleDelete","onDelete","this","name","count","className","onClick","PureComponent","HabitAddForm","memo","formRef","React","createRef","inputRef","ref","onSubmit","event","preventDefault","current","value","onAdd","reset","type","placeholder","Habits","habits","map","id","onReset","Component","Navbar","totalCount","App","state","item","setState","filter","handleAdd","Date","now","handleReset","length","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6PAgDeA,E,4MA3CbC,gBAAkB,WAChB,EAAKC,MAAMC,YAAY,EAAKD,MAAME,Q,EAGpCC,gBAAkB,WAChB,EAAKH,MAAMI,YAAY,EAAKJ,MAAME,Q,EAGpCG,aAAe,WACb,EAAKL,MAAMM,SAAS,EAAKN,MAAME,Q,4CAGjC,WAAS,MAGiBK,KAAKP,MAAME,MAA3BM,EAHD,EAGCA,KAAMC,EAHP,EAGOA,MACd,OACE,qBAAIC,UAAU,QAAd,UACE,sBAAMA,UAAU,aAAhB,SAA8BF,IAC9B,sBAAME,UAAU,cAAhB,SAA+BD,IAC/B,wBACEC,UAAU,8BACVC,QAASJ,KAAKR,gBAFhB,SAIE,mBAAGW,UAAU,yBAEf,wBACEA,UAAU,8BACVC,QAASJ,KAAKJ,gBAFhB,SAIE,mBAAGO,UAAU,0BAEf,wBACEA,UAAU,4BACVC,QAASJ,KAAKF,aAFhB,SAIE,mBAAGK,UAAU,0B,GArCHE,iBC4BLC,EA7BMC,gBAAK,SAACd,GACzB,IAAMe,EAAUC,IAAMC,YAChBC,EAAWF,IAAMC,YAUvB,OAGE,cAFA,CAEA,QAAME,IAAKJ,EAASL,UAAU,WAAWU,SAX1B,SAACC,GAChBA,EAAMC,iBACN,IAAMd,EAAOU,EAASK,QAAQC,MAC9BhB,GAAQR,EAAMyB,MAAMjB,GAEpBO,EAAQQ,QAAQG,SAMhB,UACE,uBAGEP,IAAKD,EACLS,KAAK,OACLjB,UAAU,YACVkB,YAAY,UAEd,wBAAQlB,UAAU,aAAlB,uBCISmB,E,4JA1Bb,WAAU,IAAD,OACP,OACE,sBAAKnB,UAAU,SAAf,UACE,cAAC,EAAD,CAAce,MAAOlB,KAAKP,MAAMyB,QAChC,6BACGlB,KAAKP,MAAM8B,OAAOC,KAAI,SAAC7B,GAAD,OAIrB,aAHA,CAGC,EAAD,CAEEA,MAAOA,EACPD,YAAa,EAAKD,MAAMC,YACxBG,YAAa,EAAKJ,MAAMI,YACxBE,SAAU,EAAKN,MAAMM,UAJhBJ,EAAM8B,SAQjB,wBAAQtB,UAAU,eAAeC,QAASJ,KAAKP,MAAMiC,QAArD,8B,GAnBaC,aCUNC,E,4JAXb,WACE,OACE,sBAAKzB,UAAU,SAAf,UACE,mBAAGA,UAAU,4BACb,sBAAMA,UAAU,YAAhB,2BACA,sBAAMA,UAAU,eAAhB,SAAgCH,KAAKP,MAAMoC,oB,GAN9BxB,iBC4FNyB,E,4MAxFbC,MAAQ,CACNR,OAAQ,CACN,CAAEE,GAAI,EAAGxB,KAAM,UAAWC,MAAO,GACjC,CAAEuB,GAAI,EAAGxB,KAAM,UAAWC,MAAO,GACjC,CAAEuB,GAAI,EAAGxB,KAAM,SAAUC,MAAO,K,EAWpCV,gBAAkB,SAACG,GAMjB,IAAM4B,EAAS,EAAKQ,MAAMR,OAAOC,KAAI,SAACQ,GACpC,OAAIA,EAAKP,KAAO9B,EAAM8B,GACb,2BAAK9B,GAAZ,IAAmBO,MAAOP,EAAMO,MAAQ,IAEnC8B,KAET,EAAKC,SAAS,CAAEV,Y,EAGlB3B,gBAAkB,SAACD,GACjB,IAAM4B,EAAS,EAAKQ,MAAMR,OAAOC,KAAI,SAACQ,GACpC,GAAIA,EAAKP,KAAO9B,EAAM8B,GAAI,CACxB,IAAMvB,EAAQP,EAAMO,MAAQ,EAC5B,OAAO,2BAAKP,GAAZ,IAAmBO,MAAOA,EAAQ,EAAI,EAAIA,IAE5C,OAAO8B,KAET,EAAKC,SAAS,CAAEV,Y,EAGlBzB,aAAe,SAACH,GAMd,IAAM4B,EAAS,EAAKQ,MAAMR,OAAOW,QAAO,SAACF,GAAD,OAAUA,EAAKP,KAAO9B,EAAM8B,MACpE,EAAKQ,SAAS,CAAEV,Y,EAGlBY,UAAY,SAAClC,GAEX,IAAMsB,EAAM,sBAAO,EAAKQ,MAAMR,QAAlB,CAA0B,CAAEE,GAAIW,KAAKC,MAAOpC,OAAMC,MAAO,KACrE,EAAK+B,SAAS,CAAEV,Y,EAGlBe,YAAc,WACZ,IAAMf,EAAS,EAAKQ,MAAMR,OAAOC,KAAI,SAAC7B,GACpC,OAAIA,EAAMO,MAAQ,EACT,2BAAKP,GAAZ,IAAmBO,MAAO,IAErBP,KAET,EAAKsC,SAAS,CAAEV,Y,4CAGlB,WACE,OACE,qCACE,cAAC,EAAD,CACEM,WACE7B,KAAK+B,MAAMR,OAAOW,QAAO,SAACvC,GAAD,OAAWA,EAAMO,MAAQ,KAAGqC,SAGzD,cAAC,EAAD,CACEhB,OAAQvB,KAAK+B,MAAMR,OACnB7B,YAAaM,KAAKR,gBAClBK,YAAaG,KAAKJ,gBAClBG,SAAUC,KAAKF,aACfoB,MAAOlB,KAAKmC,UACZT,QAAS1B,KAAKsC,qB,GAlFNX,a,YCElBa,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.027eb88b.chunk.js","sourcesContent":["// rcc + Tab\r\nimport React, { PureComponent } from \"react\";\r\n\r\n// class name은 항상 대문자로 시작\r\nclass Habit extends PureComponent {\r\n  handleIncrement = () => {\r\n    this.props.onIncrement(this.props.habit);\r\n  };\r\n\r\n  handleDecrement = () => {\r\n    this.props.onDecrement(this.props.habit);\r\n  };\r\n\r\n  handleDelete = () => {\r\n    this.props.onDelete(this.props.habit);\r\n  };\r\n\r\n  render() {\r\n    // habit에 있는 name과 count가 각각 변수에 들어간다.\r\n    // 대신 habit에 있는 변수 이름과 동일한 이름을 써야한다.\r\n    const { name, count } = this.props.habit;\r\n    return (\r\n      <li className=\"habit\">\r\n        <span className=\"habit-name\">{name}</span>\r\n        <span className=\"habit-count\">{count}</span>\r\n        <button\r\n          className=\"habit-button habit-increase\"\r\n          onClick={this.handleIncrement}\r\n        >\r\n          <i className=\"fas fa-plus-square\"></i>\r\n        </button>\r\n        <button\r\n          className=\"habit-button habit-decrease\"\r\n          onClick={this.handleDecrement}\r\n        >\r\n          <i className=\"fas fa-minus-square\"></i>\r\n        </button>\r\n        <button\r\n          className=\"habit-button habit-delete\"\r\n          onClick={this.handleDelete}\r\n        >\r\n          <i className=\"fas fa-trash\"></i>\r\n        </button>\r\n      </li>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Habit;\r\n","// rsi + Tab\r\nimport React, { memo } from \"react\";\r\n\r\nconst HabitAddForm = memo((props) => {\r\n  const formRef = React.createRef();\r\n  const inputRef = React.createRef(); // Ref라는 오브젝트가 생성\r\n\r\n  const onSubmit = (event) => {\r\n    event.preventDefault(); //버튼을 누르면 페이지가 reloading됨. 이러한 브라우저의 기본 기능을 취소해줌\r\n    const name = inputRef.current.value; // 현재 있는 요소의 value를 읽어옴\r\n    name && props.onAdd(name); // name이 텅텅 비어져있지 않다면 onAdd 호출\r\n    // this.inputRef.current.value = ''; // 입력한 거 초기화\r\n    formRef.current.reset(); //위의 코드와 동일함(이게 더 정석임)\r\n  };\r\n\r\n  return (\r\n    // form에서는 button이 눌려지면 submit이라는 이벤트가 발생함\r\n    // 그래서 사용자가 버튼을 누르면 onSubmit 함수를 호출\r\n    <form ref={formRef} className=\"add-form\" onSubmit={onSubmit}>\r\n      <input\r\n        //원하는 요소에 Ref 오브젝트를 전달\r\n        // input 요소가 inputRef와 연결됨 => input에 접근해서 해당하는 데이터 읽어올 수 있다.\r\n        ref={inputRef}\r\n        type=\"text\"\r\n        className=\"add-input\"\r\n        placeholder=\"Habit\"\r\n      />\r\n      <button className=\"add-button\">Add</button>\r\n    </form>\r\n  );\r\n});\r\n\r\nexport default HabitAddForm;\r\n","import React, { Component } from \"react\";\r\nimport Habit from \"./habit\";\r\nimport HabitAddForm from \"./habitAddForm\";\r\n\r\nclass Habits extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"habits\">\r\n        <HabitAddForm onAdd={this.props.onAdd} />\r\n        <ul>\r\n          {this.props.habits.map((habit) => (\r\n            // 리액트에서는 리스트와 같은 자식 컴포넌트가 있으면 고유한 키를 가지고 있어야 한다.\r\n            // 각각의 컴포넌트에 아이디를 부여함으로써 성능 계산이 가능하다. (불필요한 렌더링을 하지 않는다던지)\r\n            // key는 고유한 번호를 써야한다. 배열을 이용할 때 인덱스를 key로 사용하면 안된다!\r\n            <Habit\r\n              key={habit.id}\r\n              habit={habit}\r\n              onIncrement={this.props.onIncrement}\r\n              onDecrement={this.props.onDecrement}\r\n              onDelete={this.props.onDelete}\r\n            />\r\n          ))}\r\n        </ul>\r\n        <button className=\"habits-reset\" onClick={this.props.onReset}>\r\n          Reset All\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Habits;\r\n","import React, { PureComponent } from \"react\";\r\n\r\nclass Navbar extends PureComponent {\r\n  render() {\r\n    return (\r\n      <nav className=\"navbar\">\r\n        <i className=\"navbar-logo fas fa-leaf\"></i>\r\n        <span className=\"page-name\">Habit Tracker</span>\r\n        <span className=\"navbar-count\">{this.props.totalCount}</span>\r\n      </nav>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Navbar;\r\n","import React, { Component } from \"react\";\nimport \"./app.css\";\nimport Habits from \"./components/habits\";\nimport Navbar from \"./components/navbar\";\n\nclass App extends Component {\n  state = {\n    habits: [\n      { id: 1, name: \"Reading\", count: 0 },\n      { id: 2, name: \"Running\", count: 0 },\n      { id: 3, name: \"Coding\", count: 0 },\n    ],\n  };\n\n  /* 이 컴포넌트 안에 전체적인 데이터가 들어있기 때문에 데이터가 변경되는 경우에는\n  이 컴포넌트 안에서 수정하는 로직들을 작성해야한다.\n  state를 업데이트할 때는 리액트에서 제공하는 setState 함수를 호출해야한다.\n  state를 직접적으로 변경하는 것은 좋지 않다 => Shallow Comparison 때문에!\n  안에 있는 데이터를 수정하기만 하면 결국 동일한 오브젝트이기 때문에 업데이트가 되지 않는다.\n  그래서 데이터가 변경된다면 원래 있던 오브젝트는 불변의 아이로 놔두고 새로운 오브젝트를 만드는 게 더 좋다 */\n\n  handleIncrement = (habit) => {\n    /* bad code\n    const habits = [...this.state.habits]; //...Spread Syntax\n    const index = habits.indexOf(habit);\n    habits[index].count++;\n    */\n    const habits = this.state.habits.map((item) => {\n      if (item.id === habit.id) {\n        return { ...habit, count: habit.count + 1 }; // deconstructing object: habit object의 key와 value를 복사해서 새로운 object 생성\n      }\n      return item;\n    });\n    this.setState({ habits }); // {habits : habits} key와 value의 이름이 같을 때 생략가능\n  };\n\n  handleDecrement = (habit) => {\n    const habits = this.state.habits.map((item) => {\n      if (item.id === habit.id) {\n        const count = habit.count - 1;\n        return { ...habit, count: count < 0 ? 0 : count };\n      }\n      return item;\n    });\n    this.setState({ habits });\n  };\n\n  handleDelete = (habit) => {\n    /*\n    const habits = [...this.state.habits];\n    const index = habits.indexOf(habit);\n    habits.splice(index, 1);\n    */\n    const habits = this.state.habits.filter((item) => item.id !== habit.id);\n    this.setState({ habits });\n  };\n\n  handleAdd = (name) => {\n    // Date.now() => 현재 날짜와 시간을(초 단위까지) 합해서 만들어줌\n    const habits = [...this.state.habits, { id: Date.now(), name, count: 0 }];\n    this.setState({ habits });\n  };\n\n  handleReset = () => {\n    const habits = this.state.habits.map((habit) => {\n      if (habit.count > 0) {\n        return { ...habit, count: 0 };\n      }\n      return habit;\n    });\n    this.setState({ habits });\n  };\n\n  render() {\n    return (\n      <>\n        <Navbar\n          totalCount={\n            this.state.habits.filter((habit) => habit.count > 0).length\n          }\n        />\n        <Habits\n          habits={this.state.habits}\n          onIncrement={this.handleIncrement}\n          onDecrement={this.handleDecrement}\n          onDelete={this.handleDelete}\n          onAdd={this.handleAdd}\n          onReset={this.handleReset}\n        />\n      </>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./app\";\nimport \"@fortawesome/fontawesome-free/js/all.js\";\nimport SimpleHabit from \"./components/simpleHabit\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}